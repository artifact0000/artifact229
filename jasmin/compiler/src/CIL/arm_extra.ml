open Datatypes
open Arch_decl
open Arch_extra
open Arm
open Arm_decl
open Arm_instr_decl
open Arm_params_core
open Compiler_util
open Eqtype
open Expr
open Fexpr
open Seq
open Sopn
open Ssralg
open Type
open Utils0
open Var0
open Word0
open Wsize

type __ = Obj.t

type arm_extra_op =
| Oarm_swap of wsize
| Oarm_add_large_imm

(** val arm_extra_op_beq : arm_extra_op -> arm_extra_op -> bool **)

let arm_extra_op_beq x y =
  match x with
  | Oarm_swap x0 ->
    (match y with
     | Oarm_swap x1 -> wsize_beq x0 x1
     | Oarm_add_large_imm -> false)
  | Oarm_add_large_imm ->
    (match y with
     | Oarm_swap _ -> false
     | Oarm_add_large_imm -> true)

(** val arm_extra_op_eq_dec : arm_extra_op -> arm_extra_op -> bool **)

let arm_extra_op_eq_dec x y =
  let b = arm_extra_op_beq x y in if b then true else false

(** val arm_extra_op_eq_axiom : arm_extra_op Equality.axiom **)

let arm_extra_op_eq_axiom =
  eq_axiom_of_scheme arm_extra_op_beq

(** val arm_extra_op_eqMixin : arm_extra_op Equality.mixin_of **)

let arm_extra_op_eqMixin =
  { Equality.op = arm_extra_op_beq; Equality.mixin_of__1 =
    arm_extra_op_eq_axiom }

(** val arm_extra_op_eqType : Equality.coq_type **)

let arm_extra_op_eqType =
  Obj.magic arm_extra_op_eqMixin

(** val eqTC_arm_extra_op : arm_extra_op eqTypeC **)

let eqTC_arm_extra_op =
  { beq = arm_extra_op_beq; ceqP = arm_extra_op_eq_axiom }

(** val coq_Oarm_add_large_imm_instr : instruction_desc **)

let coq_Oarm_add_large_imm_instr =
  let ty = Coq_sword arm_reg_size in
  let tys = ty :: (ty :: []) in
  let semi0 = fun x y -> Ok
    ((GRing.add (GRing.ComRing.zmodType (word arm_reg_size)) x y), x)
  in
  { str = (fun _ ->
  'a'::('d'::('d'::('_'::('l'::('a'::('r'::('g'::('e'::('_'::('i'::('m'::('m'::[])))))))))))));
  tin = tys; i_in = ((ADExplicit (O, None)) :: ((ADExplicit ((S O),
  None)) :: [])); tout = tys; i_out = ((ADExplicit ((S (S O)),
  None)) :: ((ADExplicit (O, None)) :: [])); semi = (Obj.magic semi0);
  i_safe = [] }

(** val get_instr_desc : arm_extra_op -> instruction_desc **)

let get_instr_desc = function
| Oarm_swap sz -> coq_Oswap_instr (Coq_sword sz)
| Oarm_add_large_imm -> coq_Oarm_add_large_imm_instr

(** val arm_extra_op_decl : arm_extra_op asmOp **)

let arm_extra_op_decl =
  { _eqT = eqTC_arm_extra_op; asm_op_instr = get_instr_desc; prim_string =
    [] }

module E =
 struct
  (** val pass_name : char list **)

  let pass_name =
    'a'::('s'::('m'::('g'::('e'::('n'::[])))))

  (** val internal_error : instr_info -> char list -> pp_error_loc **)

  let internal_error ii msg =
    { pel_msg = (PPEstring msg); pel_fn = None; pel_fi = None; pel_ii = (Some
      ii); pel_vi = None; pel_pass = (Some pass_name); pel_internal = true }

  (** val error : instr_info -> char list -> pp_error_loc **)

  let error ii msg =
    { pel_msg = (PPEstring msg); pel_fn = None; pel_fi = None; pel_ii = (Some
      ii); pel_vi = None; pel_pass = (Some pass_name); pel_internal = false }
 end

(** val assemble_extra :
    instr_info -> arm_extra_op -> lexpr list -> rexpr list -> (((register,
    __, __, rflag, condt, arm_op) asm_op_msb_t * lexpr list) * rexpr list)
    list cexec **)

let assemble_extra ii o outx inx =
  match o with
  | Oarm_swap sz ->
    if eq_op wsize_eqType (Obj.magic sz) (Obj.magic U32)
    then (match outx with
          | [] ->
            Error
              (E.error ii
                ('o'::('n'::('l'::('y'::(' '::('r'::('e'::('g'::('i'::('s'::('t'::('e'::('r'::(' '::('i'::('s'::(' '::('a'::('c'::('c'::('e'::('p'::('t'::('e'::('d'::(' '::('o'::('n'::(' '::('s'::('o'::('u'::('r'::('c'::('e'::(' '::('a'::('n'::('d'::(' '::('d'::('e'::('s'::('t'::('i'::('n'::('a'::('t'::('i'::('o'::('n'::(' '::('o'::('f'::(' '::('t'::('h'::('e'::(' '::('s'::('w'::('a'::('p'::(' '::('i'::('n'::('s'::('t'::('r'::('u'::('c'::('t'::('i'::('o'::('n'::(' '::('o'::('n'::(' '::('a'::('r'::('m'::[])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
          | l :: l0 ->
            (match l with
             | Store (_, _, _) ->
               Error
                 (E.error ii
                   ('o'::('n'::('l'::('y'::(' '::('r'::('e'::('g'::('i'::('s'::('t'::('e'::('r'::(' '::('i'::('s'::(' '::('a'::('c'::('c'::('e'::('p'::('t'::('e'::('d'::(' '::('o'::('n'::(' '::('s'::('o'::('u'::('r'::('c'::('e'::(' '::('a'::('n'::('d'::(' '::('d'::('e'::('s'::('t'::('i'::('n'::('a'::('t'::('i'::('o'::('n'::(' '::('o'::('f'::(' '::('t'::('h'::('e'::(' '::('s'::('w'::('a'::('p'::(' '::('i'::('n'::('s'::('t'::('r'::('u'::('c'::('t'::('i'::('o'::('n'::(' '::('o'::('n'::(' '::('a'::('r'::('m'::[])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
             | LLvar x ->
               (match l0 with
                | [] ->
                  Error
                    (E.error ii
                      ('o'::('n'::('l'::('y'::(' '::('r'::('e'::('g'::('i'::('s'::('t'::('e'::('r'::(' '::('i'::('s'::(' '::('a'::('c'::('c'::('e'::('p'::('t'::('e'::('d'::(' '::('o'::('n'::(' '::('s'::('o'::('u'::('r'::('c'::('e'::(' '::('a'::('n'::('d'::(' '::('d'::('e'::('s'::('t'::('i'::('n'::('a'::('t'::('i'::('o'::('n'::(' '::('o'::('f'::(' '::('t'::('h'::('e'::(' '::('s'::('w'::('a'::('p'::(' '::('i'::('n'::('s'::('t'::('r'::('u'::('c'::('t'::('i'::('o'::('n'::(' '::('o'::('n'::(' '::('a'::('r'::('m'::[])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                | l1 :: l2 ->
                  (match l1 with
                   | Store (_, _, _) ->
                     Error
                       (E.error ii
                         ('o'::('n'::('l'::('y'::(' '::('r'::('e'::('g'::('i'::('s'::('t'::('e'::('r'::(' '::('i'::('s'::(' '::('a'::('c'::('c'::('e'::('p'::('t'::('e'::('d'::(' '::('o'::('n'::(' '::('s'::('o'::('u'::('r'::('c'::('e'::(' '::('a'::('n'::('d'::(' '::('d'::('e'::('s'::('t'::('i'::('n'::('a'::('t'::('i'::('o'::('n'::(' '::('o'::('f'::(' '::('t'::('h'::('e'::(' '::('s'::('w'::('a'::('p'::(' '::('i'::('n'::('s'::('t'::('r'::('u'::('c'::('t'::('i'::('o'::('n'::(' '::('o'::('n'::(' '::('a'::('r'::('m'::[])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                   | LLvar y ->
                     (match l2 with
                      | [] ->
                        (match inx with
                         | [] ->
                           Error
                             (E.error ii
                               ('o'::('n'::('l'::('y'::(' '::('r'::('e'::('g'::('i'::('s'::('t'::('e'::('r'::(' '::('i'::('s'::(' '::('a'::('c'::('c'::('e'::('p'::('t'::('e'::('d'::(' '::('o'::('n'::(' '::('s'::('o'::('u'::('r'::('c'::('e'::(' '::('a'::('n'::('d'::(' '::('d'::('e'::('s'::('t'::('i'::('n'::('a'::('t'::('i'::('o'::('n'::(' '::('o'::('f'::(' '::('t'::('h'::('e'::(' '::('s'::('w'::('a'::('p'::(' '::('i'::('n'::('s'::('t'::('r'::('u'::('c'::('t'::('i'::('o'::('n'::(' '::('o'::('n'::(' '::('a'::('r'::('m'::[])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                         | r :: l3 ->
                           (match r with
                            | Load (_, _, _) ->
                              Error
                                (E.error ii
                                  ('o'::('n'::('l'::('y'::(' '::('r'::('e'::('g'::('i'::('s'::('t'::('e'::('r'::(' '::('i'::('s'::(' '::('a'::('c'::('c'::('e'::('p'::('t'::('e'::('d'::(' '::('o'::('n'::(' '::('s'::('o'::('u'::('r'::('c'::('e'::(' '::('a'::('n'::('d'::(' '::('d'::('e'::('s'::('t'::('i'::('n'::('a'::('t'::('i'::('o'::('n'::(' '::('o'::('f'::(' '::('t'::('h'::('e'::(' '::('s'::('w'::('a'::('p'::(' '::('i'::('n'::('s'::('t'::('r'::('u'::('c'::('t'::('i'::('o'::('n'::(' '::('o'::('n'::(' '::('a'::('r'::('m'::[])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                            | Rexpr f ->
                              (match f with
                               | Fvar z ->
                                 (match l3 with
                                  | [] ->
                                    Error
                                      (E.error ii
                                        ('o'::('n'::('l'::('y'::(' '::('r'::('e'::('g'::('i'::('s'::('t'::('e'::('r'::(' '::('i'::('s'::(' '::('a'::('c'::('c'::('e'::('p'::('t'::('e'::('d'::(' '::('o'::('n'::(' '::('s'::('o'::('u'::('r'::('c'::('e'::(' '::('a'::('n'::('d'::(' '::('d'::('e'::('s'::('t'::('i'::('n'::('a'::('t'::('i'::('o'::('n'::(' '::('o'::('f'::(' '::('t'::('h'::('e'::(' '::('s'::('w'::('a'::('p'::(' '::('i'::('n'::('s'::('t'::('r'::('u'::('c'::('t'::('i'::('o'::('n'::(' '::('o'::('n'::(' '::('a'::('r'::('m'::[])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                  | r0 :: l4 ->
                                    (match r0 with
                                     | Load (_, _, _) ->
                                       Error
                                         (E.error ii
                                           ('o'::('n'::('l'::('y'::(' '::('r'::('e'::('g'::('i'::('s'::('t'::('e'::('r'::(' '::('i'::('s'::(' '::('a'::('c'::('c'::('e'::('p'::('t'::('e'::('d'::(' '::('o'::('n'::(' '::('s'::('o'::('u'::('r'::('c'::('e'::(' '::('a'::('n'::('d'::(' '::('d'::('e'::('s'::('t'::('i'::('n'::('a'::('t'::('i'::('o'::('n'::(' '::('o'::('f'::(' '::('t'::('h'::('e'::(' '::('s'::('w'::('a'::('p'::(' '::('i'::('n'::('s'::('t'::('r'::('u'::('c'::('t'::('i'::('o'::('n'::(' '::('o'::('n'::(' '::('a'::('r'::('m'::[])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                     | Rexpr f0 ->
                                       (match f0 with
                                        | Fvar w ->
                                          (match l4 with
                                           | [] ->
                                             if negb
                                                  (eq_op Var.var_eqType
                                                    (Obj.magic x.v_var)
                                                    (Obj.magic w.v_var))
                                             then if negb
                                                       (eq_op Var.var_eqType
                                                         (Obj.magic y.v_var)
                                                         (Obj.magic x.v_var))
                                                  then if all (fun x0 ->
                                                            eq_op
                                                              stype_eqType
                                                              (Obj.magic
                                                                Var.vtype
                                                                x0.v_var)
                                                              (Obj.magic
                                                                (Coq_sword
                                                                U32)))
                                                            (x :: (y :: (z :: (w :: []))))
                                                       then Ok ((((None,
                                                              (ARM_op (EOR,
                                                              default_opts))),
                                                              ((LLvar
                                                              x) :: [])),
                                                              ((Rexpr (Fvar
                                                              z)) :: ((Rexpr
                                                              (Fvar
                                                              w)) :: []))) :: ((((None,
                                                              (ARM_op (EOR,
                                                              default_opts))),
                                                              ((LLvar
                                                              y) :: [])),
                                                              ((Rexpr (Fvar
                                                              x)) :: ((Rexpr
                                                              (Fvar
                                                              w)) :: []))) :: ((((None,
                                                              (ARM_op (EOR,
                                                              default_opts))),
                                                              ((LLvar
                                                              x) :: [])),
                                                              ((Rexpr (Fvar
                                                              x)) :: ((Rexpr
                                                              (Fvar
                                                              y)) :: []))) :: [])))
                                                       else let s =
                                                              E.error ii
                                                                ('a'::('r'::('m'::(' '::('s'::('w'::('a'::('p'::(' '::('o'::('n'::('l'::('y'::(' '::('v'::('a'::('l'::('i'::('d'::(' '::('f'::('o'::('r'::(' '::('r'::('e'::('g'::('i'::('s'::('t'::('e'::('r'::(' '::('o'::('f'::(' '::('t'::('y'::('p'::('e'::(' '::('u'::('3'::('2'::[]))))))))))))))))))))))))))))))))))))))))))))
                                                            in
                                                            Error s
                                                  else let s =
                                                         E.internal_error ii
                                                           ('b'::('a'::('d'::(' '::('a'::('r'::('m'::(' '::('s'::('w'::('a'::('p'::(' '::(':'::(' '::('y'::(' '::('='::(' '::('x'::[]))))))))))))))))))))
                                                       in
                                                       Error s
                                             else let s =
                                                    E.internal_error ii
                                                      ('b'::('a'::('d'::(' '::('a'::('r'::('m'::(' '::('s'::('w'::('a'::('p'::(' '::(':'::(' '::('x'::(' '::('='::(' '::('w'::[]))))))))))))))))))))
                                                  in
                                                  Error s
                                           | _ :: _ ->
                                             Error
                                               (E.error ii
                                                 ('o'::('n'::('l'::('y'::(' '::('r'::('e'::('g'::('i'::('s'::('t'::('e'::('r'::(' '::('i'::('s'::(' '::('a'::('c'::('c'::('e'::('p'::('t'::('e'::('d'::(' '::('o'::('n'::(' '::('s'::('o'::('u'::('r'::('c'::('e'::(' '::('a'::('n'::('d'::(' '::('d'::('e'::('s'::('t'::('i'::('n'::('a'::('t'::('i'::('o'::('n'::(' '::('o'::('f'::(' '::('t'::('h'::('e'::(' '::('s'::('w'::('a'::('p'::(' '::('i'::('n'::('s'::('t'::('r'::('u'::('c'::('t'::('i'::('o'::('n'::(' '::('o'::('n'::(' '::('a'::('r'::('m'::[]))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                        | _ ->
                                          Error
                                            (E.error ii
                                              ('o'::('n'::('l'::('y'::(' '::('r'::('e'::('g'::('i'::('s'::('t'::('e'::('r'::(' '::('i'::('s'::(' '::('a'::('c'::('c'::('e'::('p'::('t'::('e'::('d'::(' '::('o'::('n'::(' '::('s'::('o'::('u'::('r'::('c'::('e'::(' '::('a'::('n'::('d'::(' '::('d'::('e'::('s'::('t'::('i'::('n'::('a'::('t'::('i'::('o'::('n'::(' '::('o'::('f'::(' '::('t'::('h'::('e'::(' '::('s'::('w'::('a'::('p'::(' '::('i'::('n'::('s'::('t'::('r'::('u'::('c'::('t'::('i'::('o'::('n'::(' '::('o'::('n'::(' '::('a'::('r'::('m'::[]))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                               | _ ->
                                 Error
                                   (E.error ii
                                     ('o'::('n'::('l'::('y'::(' '::('r'::('e'::('g'::('i'::('s'::('t'::('e'::('r'::(' '::('i'::('s'::(' '::('a'::('c'::('c'::('e'::('p'::('t'::('e'::('d'::(' '::('o'::('n'::(' '::('s'::('o'::('u'::('r'::('c'::('e'::(' '::('a'::('n'::('d'::(' '::('d'::('e'::('s'::('t'::('i'::('n'::('a'::('t'::('i'::('o'::('n'::(' '::('o'::('f'::(' '::('t'::('h'::('e'::(' '::('s'::('w'::('a'::('p'::(' '::('i'::('n'::('s'::('t'::('r'::('u'::('c'::('t'::('i'::('o'::('n'::(' '::('o'::('n'::(' '::('a'::('r'::('m'::[]))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                      | _ :: _ ->
                        Error
                          (E.error ii
                            ('o'::('n'::('l'::('y'::(' '::('r'::('e'::('g'::('i'::('s'::('t'::('e'::('r'::(' '::('i'::('s'::(' '::('a'::('c'::('c'::('e'::('p'::('t'::('e'::('d'::(' '::('o'::('n'::(' '::('s'::('o'::('u'::('r'::('c'::('e'::(' '::('a'::('n'::('d'::(' '::('d'::('e'::('s'::('t'::('i'::('n'::('a'::('t'::('i'::('o'::('n'::(' '::('o'::('f'::(' '::('t'::('h'::('e'::(' '::('s'::('w'::('a'::('p'::(' '::('i'::('n'::('s'::('t'::('r'::('u'::('c'::('t'::('i'::('o'::('n'::(' '::('o'::('n'::(' '::('a'::('r'::('m'::[]))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    else Error
           (E.error ii
             ('a'::('r'::('m'::(' '::('s'::('w'::('a'::('p'::(' '::('o'::('n'::('l'::('y'::(' '::('v'::('a'::('l'::('i'::('d'::(' '::('f'::('o'::('r'::(' '::('r'::('e'::('g'::('i'::('s'::('t'::('e'::('r'::(' '::('o'::('f'::(' '::('t'::('y'::('p'::('e'::(' '::('u'::('3'::('2'::[])))))))))))))))))))))))))))))))))))))))))))))
  | Oarm_add_large_imm ->
    (match outx with
     | [] ->
       Error
         (E.internal_error ii
           ('b'::('a'::('d'::(' '::('a'::('r'::('m'::('_'::('a'::('d'::('d'::('_'::('l'::('a'::('r'::('g'::('e'::('_'::('i'::('m'::('m'::(':'::(' '::('i'::('n'::('v'::('a'::('l'::('i'::('d'::(' '::('a'::('r'::('g'::('s'::(' '::('o'::('r'::(' '::('d'::('e'::('s'::('t'::('s'::[])))))))))))))))))))))))))))))))))))))))))))))
     | l :: l0 ->
       (match l with
        | Store (_, _, _) ->
          Error
            (E.internal_error ii
              ('b'::('a'::('d'::(' '::('a'::('r'::('m'::('_'::('a'::('d'::('d'::('_'::('l'::('a'::('r'::('g'::('e'::('_'::('i'::('m'::('m'::(':'::(' '::('i'::('n'::('v'::('a'::('l'::('i'::('d'::(' '::('a'::('r'::('g'::('s'::(' '::('o'::('r'::(' '::('d'::('e'::('s'::('t'::('s'::[])))))))))))))))))))))))))))))))))))))))))))))
        | LLvar x ->
          (match l0 with
           | [] ->
             Error
               (E.internal_error ii
                 ('b'::('a'::('d'::(' '::('a'::('r'::('m'::('_'::('a'::('d'::('d'::('_'::('l'::('a'::('r'::('g'::('e'::('_'::('i'::('m'::('m'::(':'::(' '::('i'::('n'::('v'::('a'::('l'::('i'::('d'::(' '::('a'::('r'::('g'::('s'::(' '::('o'::('r'::(' '::('d'::('e'::('s'::('t'::('s'::[])))))))))))))))))))))))))))))))))))))))))))))
           | l1 :: l2 ->
             (match l1 with
              | Store (_, _, _) ->
                Error
                  (E.internal_error ii
                    ('b'::('a'::('d'::(' '::('a'::('r'::('m'::('_'::('a'::('d'::('d'::('_'::('l'::('a'::('r'::('g'::('e'::('_'::('i'::('m'::('m'::(':'::(' '::('i'::('n'::('v'::('a'::('l'::('i'::('d'::(' '::('a'::('r'::('g'::('s'::(' '::('o'::('r'::(' '::('d'::('e'::('s'::('t'::('s'::[])))))))))))))))))))))))))))))))))))))))))))))
              | LLvar y ->
                (match l2 with
                 | [] ->
                   (match inx with
                    | [] ->
                      Error
                        (E.internal_error ii
                          ('b'::('a'::('d'::(' '::('a'::('r'::('m'::('_'::('a'::('d'::('d'::('_'::('l'::('a'::('r'::('g'::('e'::('_'::('i'::('m'::('m'::(':'::(' '::('i'::('n'::('v'::('a'::('l'::('i'::('d'::(' '::('a'::('r'::('g'::('s'::(' '::('o'::('r'::(' '::('d'::('e'::('s'::('t'::('s'::[])))))))))))))))))))))))))))))))))))))))))))))
                    | r :: l3 ->
                      (match r with
                       | Load (_, _, _) ->
                         Error
                           (E.internal_error ii
                             ('b'::('a'::('d'::(' '::('a'::('r'::('m'::('_'::('a'::('d'::('d'::('_'::('l'::('a'::('r'::('g'::('e'::('_'::('i'::('m'::('m'::(':'::(' '::('i'::('n'::('v'::('a'::('l'::('i'::('d'::(' '::('a'::('r'::('g'::('s'::(' '::('o'::('r'::(' '::('d'::('e'::('s'::('t'::('s'::[])))))))))))))))))))))))))))))))))))))))))))))
                       | Rexpr f ->
                         (match f with
                          | Fvar y' ->
                            (match l3 with
                             | [] ->
                               Error
                                 (E.internal_error ii
                                   ('b'::('a'::('d'::(' '::('a'::('r'::('m'::('_'::('a'::('d'::('d'::('_'::('l'::('a'::('r'::('g'::('e'::('_'::('i'::('m'::('m'::(':'::(' '::('i'::('n'::('v'::('a'::('l'::('i'::('d'::(' '::('a'::('r'::('g'::('s'::(' '::('o'::('r'::(' '::('d'::('e'::('s'::('t'::('s'::[])))))))))))))))))))))))))))))))))))))))))))))
                             | r0 :: l4 ->
                               (match r0 with
                                | Load (_, _, _) ->
                                  Error
                                    (E.internal_error ii
                                      ('b'::('a'::('d'::(' '::('a'::('r'::('m'::('_'::('a'::('d'::('d'::('_'::('l'::('a'::('r'::('g'::('e'::('_'::('i'::('m'::('m'::(':'::(' '::('i'::('n'::('v'::('a'::('l'::('i'::('d'::(' '::('a'::('r'::('g'::('s'::(' '::('o'::('r'::(' '::('d'::('e'::('s'::('t'::('s'::[])))))))))))))))))))))))))))))))))))))))))))))
                                | Rexpr f0 ->
                                  (match f0 with
                                   | Fapp1 (s, f1) ->
                                     (match s with
                                      | Oword_of_int _ ->
                                        (match f1 with
                                         | Fconst imm ->
                                           (match l4 with
                                            | [] ->
                                              if (&&)
                                                   (negb
                                                     (eq_op Var.var_eqType
                                                       (Obj.magic x.v_var)
                                                       (Obj.magic y.v_var)))
                                                   (eq_op Var.var_eqType
                                                     (Obj.magic y.v_var)
                                                     (Obj.magic y'.v_var))
                                              then if all (fun x0 ->
                                                        eq_op stype_eqType
                                                          (Obj.magic
                                                            Var.vtype
                                                            x0.v_var)
                                                          (Obj.magic
                                                            (Coq_sword U32)))
                                                        (x :: (y :: []))
                                                   then Ok
                                                          (map (fun pat ->
                                                            let (y0, e) = pat
                                                            in
                                                            let (d, o0) = y0
                                                            in
                                                            (((None, o0), d),
                                                            e))
                                                            (ARMFopn_core.smart_addi
                                                              x y imm))
                                                   else let s0 =
                                                          E.error ii
                                                            ('a'::('r'::('m'::(' '::('s'::('w'::('a'::('p'::(' '::('o'::('n'::('l'::('y'::(' '::('v'::('a'::('l'::('i'::('d'::(' '::('f'::('o'::('r'::(' '::('r'::('e'::('g'::('i'::('s'::('t'::('e'::('r'::(' '::('o'::('f'::(' '::('t'::('y'::('p'::('e'::(' '::('u'::('3'::('2'::[]))))))))))))))))))))))))))))))))))))))))))))
                                                        in
                                                        Error s0
                                              else let s0 =
                                                     E.internal_error ii
                                                       ('b'::('a'::('d'::(' '::('a'::('r'::('m'::('_'::('a'::('d'::('d'::('_'::('l'::('a'::('r'::('g'::('e'::('_'::('i'::('m'::('m'::(':'::(' '::('i'::('n'::('v'::('a'::('l'::('i'::('d'::(' '::('r'::('e'::('g'::('i'::('s'::('t'::('e'::('r'::[])))))))))))))))))))))))))))))))))))))))
                                                   in
                                                   Error s0
                                            | _ :: _ ->
                                              Error
                                                (E.internal_error ii
                                                  ('b'::('a'::('d'::(' '::('a'::('r'::('m'::('_'::('a'::('d'::('d'::('_'::('l'::('a'::('r'::('g'::('e'::('_'::('i'::('m'::('m'::(':'::(' '::('i'::('n'::('v'::('a'::('l'::('i'::('d'::(' '::('a'::('r'::('g'::('s'::(' '::('o'::('r'::(' '::('d'::('e'::('s'::('t'::('s'::[]))))))))))))))))))))))))))))))))))))))))))))))
                                         | _ ->
                                           Error
                                             (E.internal_error ii
                                               ('b'::('a'::('d'::(' '::('a'::('r'::('m'::('_'::('a'::('d'::('d'::('_'::('l'::('a'::('r'::('g'::('e'::('_'::('i'::('m'::('m'::(':'::(' '::('i'::('n'::('v'::('a'::('l'::('i'::('d'::(' '::('a'::('r'::('g'::('s'::(' '::('o'::('r'::(' '::('d'::('e'::('s'::('t'::('s'::[]))))))))))))))))))))))))))))))))))))))))))))))
                                      | _ ->
                                        Error
                                          (E.internal_error ii
                                            ('b'::('a'::('d'::(' '::('a'::('r'::('m'::('_'::('a'::('d'::('d'::('_'::('l'::('a'::('r'::('g'::('e'::('_'::('i'::('m'::('m'::(':'::(' '::('i'::('n'::('v'::('a'::('l'::('i'::('d'::(' '::('a'::('r'::('g'::('s'::(' '::('o'::('r'::(' '::('d'::('e'::('s'::('t'::('s'::[]))))))))))))))))))))))))))))))))))))))))))))))
                                   | _ ->
                                     Error
                                       (E.internal_error ii
                                         ('b'::('a'::('d'::(' '::('a'::('r'::('m'::('_'::('a'::('d'::('d'::('_'::('l'::('a'::('r'::('g'::('e'::('_'::('i'::('m'::('m'::(':'::(' '::('i'::('n'::('v'::('a'::('l'::('i'::('d'::(' '::('a'::('r'::('g'::('s'::(' '::('o'::('r'::(' '::('d'::('e'::('s'::('t'::('s'::[]))))))))))))))))))))))))))))))))))))))))))))))))
                          | _ ->
                            Error
                              (E.internal_error ii
                                ('b'::('a'::('d'::(' '::('a'::('r'::('m'::('_'::('a'::('d'::('d'::('_'::('l'::('a'::('r'::('g'::('e'::('_'::('i'::('m'::('m'::(':'::(' '::('i'::('n'::('v'::('a'::('l'::('i'::('d'::(' '::('a'::('r'::('g'::('s'::(' '::('o'::('r'::(' '::('d'::('e'::('s'::('t'::('s'::[]))))))))))))))))))))))))))))))))))))))))))))))))
                 | _ :: _ ->
                   Error
                     (E.internal_error ii
                       ('b'::('a'::('d'::(' '::('a'::('r'::('m'::('_'::('a'::('d'::('d'::('_'::('l'::('a'::('r'::('g'::('e'::('_'::('i'::('m'::('m'::(':'::(' '::('i'::('n'::('v'::('a'::('l'::('i'::('d'::(' '::('a'::('r'::('g'::('s'::(' '::('o'::('r'::(' '::('d'::('e'::('s'::('t'::('s'::[]))))))))))))))))))))))))))))))))))))))))))))))))))

(** val arm_extra :
    (register, __, __, rflag, condt) arch_toIdent -> (register, __, __,
    rflag, condt, arm_op, arm_extra_op) asm_extra **)

let arm_extra atoI =
  { _asm = arm; _atoI = atoI; _extra = arm_extra_op_decl; to_asm =
    assemble_extra }

type arm_extended_op =
  (register, __, __, rflag, condt, arm_op, arm_extra_op) extended_op

(** val coq_Oarm :
    (register, __, __, rflag, condt) arch_toIdent -> arm_op ->
    arm_extended_op sopn **)

let coq_Oarm _ o =
  Oasm (BaseOp (None, o))
